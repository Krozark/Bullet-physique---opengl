#include "FreeFlyCamera.hpp"

#include <cmath>
#include <GL/glu.h>

#include <iostream>
using namespace std;

sf::Vector2i old_Pos;

FreeFlyCamera::FreeFlyCamera(const btVector3 & position)
{
    Position = position;
    _phi = 0;
    _theta = 0;
    VectorsFromAngles();

    _speed = 10;
    _sensivity = 0.8;
    _verticalMotionActive = false;
    KeyConf["forward"] = sf::Keyboard::Z;
    KeyConf["backward"] = sf::Keyboard::S;
    KeyConf["strafe_left"] = sf::Keyboard::Q;
    KeyConf["strafe_right"] = sf::Keyboard::D;
    KeyConf["boost"] = sf::Keyboard::LShift;

    old_Pos = sf::Vector2i(0,0);
    /*SDL_WM_GrabInput(SDL_GRAB_ON);
    SDL_ShowCursor(SDL_DISABLE);*/
}

void FreeFlyCamera::MouseMoved(Fenettre& Windows)
{
    sf::Vector2i Pos =sf::Mouse::GetPosition();

    _theta += (old_Pos.x - Pos.x) *_sensivity;
    _phi += (old_Pos.y - Pos.y)*_sensivity;
    //_phi += (old_Pos.y - Pos.y)*_sensivity;
    //_target = Position + _forward;

    old_Pos = Pos;

    VectorsFromAngles();
}

void FreeFlyCamera::MouseWheelMoved(const sf::Event & event)
{
    if (event.MouseWheel.Delta >0) //coup de molette vers le haut
    {
        _verticalMotionActive = true;
        _timeBeforeStoppingVerticalMotion = 0.100;
        _verticalMotionDirection = 1;
    }
    else if (event.MouseWheel.Delta < 0) //coup de molette vers le bas
    {
        _verticalMotionActive = true;
        _timeBeforeStoppingVerticalMotion = 0.100;
        _verticalMotionDirection = -1;
    }
}

void FreeFlyCamera::animate(double timestep)
{

    double realspeed = (sf::Keyboard::IsKeyPressed(KeyConf["boost"]))?2*_speed:_speed;
    if (sf::Keyboard::IsKeyPressed(KeyConf["forward"]))
    {
        Position += _forward * (realspeed * timestep);
    }
    if (sf::Keyboard::IsKeyPressed(KeyConf["backward"]))
    {
        Position -= _forward * (realspeed * timestep);
    }
    if (sf::Keyboard::IsKeyPressed(KeyConf["strafe_left"]))
    {
        Position += _left * (realspeed * timestep);
    }
    if (sf::Keyboard::IsKeyPressed(KeyConf["strafe_right"]))
    {
        Position -= _left * (realspeed * timestep);
    }

    if (_verticalMotionActive)
    {
        if (timestep > _timeBeforeStoppingVerticalMotion)
            _verticalMotionActive = false;
        else
            _timeBeforeStoppingVerticalMotion -= timestep;
        Position += btVector3(0,0,_verticalMotionDirection*realspeed*timestep);
    }
    _target = Position + _forward;

}

void FreeFlyCamera::setSpeed(double speed)
{
    _speed = speed;
}

void FreeFlyCamera::setSensivity(double sensivity)
{
    _sensivity = sensivity;
}

void FreeFlyCamera::setPosition(const btVector3 & position)
{
    Position = position;
    _target = Position + _forward;
}

void FreeFlyCamera::VectorsFromAngles()
{
    static const btVector3 up(0,1,0);
    if (_phi > 89)
        _phi = 89;
    else if (_phi < -89)
        _phi = -89;
    double r_temp = cos(_phi*M_PI/180);
    _forward[0] = r_temp*cos(_theta*M_PI/180);
    _forward[1] = r_temp*sin(_theta*M_PI/180);
    _forward[2] = sin(_phi*M_PI/180);

    _left = up.cross(_forward);
    _left.normalize();

    _target = Position + _forward;
}

void FreeFlyCamera::look()
{
    cout<<Position[0]<<" "<<Position[1]<<" "<<Position[2]<<" ---- "<<_target[0]<<" "<<_target[1]<<" "<<_target[2]<<endl;
    gluLookAt(Position[0],Position[1],Position[2],_target[0],_target[1],_target[2],0,0,1);
}

FreeFlyCamera::~FreeFlyCamera()
{
    /*SDL_WM_GrabInput(SDL_GRAB_OFF);
    SDL_ShowCursor(SDL_ENABLE);*/
}
